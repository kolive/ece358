package lab2.simulate;
import lab2.event.*;

public class ABPSender {
	
	
	private double timeoutInMS;
	private double currentTimeInMS;
	
	private double packetSizeInBits;
	private double headerSizeInBits;
	private double propDelayInMS;
	
	private double bitErrorRate;

	private double frameTransmitTime;

	private double headerTransmitTime;
	
	public ABPSender(
			double timeoutInMS, double packetSizeInBits, double headerSizeInBits, double linkRateInBPS, double propDelayInMS, double bitErrorRate){
		this.timeoutInMS = timeoutInMS;
		this.packetSizeInBits = packetSizeInBits;
		this.headerSizeInBits = headerSizeInBits;
		this.propDelayInMS = propDelayInMS;
		frameTransmitTime = (headerSizeInBits + packetSizeInBits)/linkRateInBPS;
		headerTransmitTime = headerSizeInBits/linkRateInBPS;
		this.bitErrorRate = bitErrorRate;
		
	}
	
	public Event send(int seqNumber, double currentTimeInMS){
		//first stretch of the channel begins after processing the FRAME must take into account time to transmit FRAME
		Channel.simulate(bitErrorRate, propDelayInMS, currentTimeInMS + frameTransmitTime, packetSizeInBits + headerSizeInBits);
		boolean forwardDropped = Channel.isPacketDropped();
		boolean forwardError = Channel.isPacketError();
		
		//second stretch of the channel begins after getting the FRAME, must also take into account time to transmit ACK
		Channel.simulate(bitErrorRate, propDelayInMS, Channel.getLastTime() + headerTransmitTime, headerSizeInBits);
		boolean reverseDropped = Channel.isPacketDropped();
		boolean reverseError = Channel.isPacketError();
		
		if(forwardDropped || reverseDropped){
			return null;
		}
		
		//sender gets the ack
		return new Event(EventType.ACK, Channel.getLastTime(), (seqNumber+1)%2, forwardError || reverseError );
	}
	
	//returns throughput
	public double simulate(int successfulArrivals, boolean nackEnabled){
		
		Event e;
		int count = 0;
		int seqNumber = 0;
		int reqNumber = 0;
		double currentTimeInMS = 0;
		EventScheduler eventScheduler = new EventScheduler();
		
		while( count < successfulArrivals ){
			//process next event
			e = eventScheduler.dequeue();
			if(e != null){
				if(e.getType() == EventType.TO){
					currentTime = e.getTime(); //is there a time to process to?
					es.queue(new Event(EventType.TO, currentTime+timeoutValue+processPTime));	
					es.queue(send(sn));
				}else if(!e.isError()){
					currentTime = e.getTime() + processHTime; //time to process the return header
					if(e.getSN() == nextSN){
						count++;
						es.purgeTimeouts();
						sn = (sn+1)%2;
						nextSN = (nextSN+1)%2;
					/*	System.out.println("abpReceived packet with SN: " + e.getSN() + " next SN to send: " + nextSN);
						System.out.println("abpcurrent count: " + count);
						System.out.println("abpcurrent time: " + currentTime);
						System.out.println("Sending: " + sn);
						System.out.println("events: " + ecount);*/
						es.queue(new Event(EventType.TO, currentTime+timeoutValue+processPTime));	
						es.queue(send(sn));
					}else if(nackEnabled){
						//should i be purging timeouts here? I think so
						es.purgeTimeouts();
						es.queue(new Event(EventType.TO, currentTime+timeoutValue+processPTime));	
						es.queue(send(sn));
					}
				}else if(nackEnabled && e.isError()){
					currentTime = e.getTime(); //is there a time to process to?
					//should i be purging timeouts here? I think so
					// Why am I purging timeouts and resending when nackEnabled = true and the event has an error? Shouldn't this happen if the event is a NACK?
					es.purgeTimeouts();
					es.queue(new Event(EventType.TO, currentTime+timeoutValue+processPTime));	
					es.queue(send(sn));
				}
			}else{
				es.queue(new Event(EventType.TO, currentTime + processPTime+timeoutValue));	
				es.queue(send(sn));
			}
			
		}
		return currentTime;
		
	}

}
